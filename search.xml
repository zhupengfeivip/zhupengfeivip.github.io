<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>markdown语法介绍</title>
      <link href="//posts/945c96b4/"/>
      <url>//posts/945c96b4/</url>
      
        <content type="html"><![CDATA[<p>markdown语法介绍</p><p>目录（兼容性一般）<br>[Toc]</p><h1 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h1><h1 id="这是标题h1"><a href="#这是标题h1" class="headerlink" title="这是标题h1  "></a>这是标题h1  </h1><h2 id="这是标题h2"><a href="#这是标题h2" class="headerlink" title="这是标题h2  "></a>这是标题h2  </h2><h3 id="这是标题h3"><a href="#这是标题h3" class="headerlink" title="这是标题h3"></a>这是标题h3</h3><h4 id="这是标题h4"><a href="#这是标题h4" class="headerlink" title="这是标题h4"></a>这是标题h4</h4><h5 id="这是标题h5"><a href="#这是标题h5" class="headerlink" title="这是标题h5"></a>这是标题h5</h5><h6 id="这是标题h6"><a href="#这是标题h6" class="headerlink" title="这是标题h6"></a>这是标题h6</h6><h1 id="段落，换行，加粗，斜体"><a href="#段落，换行，加粗，斜体" class="headerlink" title="段落，换行，加粗，斜体"></a>段落，换行，加粗，斜体</h1><p>段落：常规输入生成p标签; <br> 行：行尾空两格或tab缩进生成br标签;<br>加粗：单个 <em> 或 _ 开头，衔接文本，对应的 </em> 或 _ 结尾；<br>斜体：一对 <em> 或 _ 开头，衔接文本，对应的一对 </em> 或 _ 结尾；<br>注意：如果你的 <em> 和 _ 两边都有空白的话，它们就只会被当成普通的符号；也可通过”\”转义，让</em>和\作为普通字符。</p><p>演示：<br>这是普通文本。</p><p>这是普通文本。</p><p></p><p><strong>这是粗体</strong>   <strong>这是粗体</strong></p><p><em>这是斜体</em>   <em>这是斜体</em> </p><h1 id="引用，代码块，分割线"><a href="#引用，代码块，分割线" class="headerlink" title="引用，代码块，分割线"></a>引用，代码块，分割线</h1><p>引用：在每行或段落前面添加”&gt;”符号即可，MD会自动为文本添加blockquote标签；引用可嵌套，即可在”&gt;”里面再输入”&gt;”生成引用块内的引用；引用块内可以使用其他的MD语法，如标题，列表，行内文本表现标识等。</p><blockquote><p>这是一个引用块；<br>也可以这样写,<br>断行可以不用添加”&gt;”符号；</p><blockquote><p>这是子引用。<br>代码块：缩进4个空格或一个tab制表符就能生成代码块，MD会用\&lt;pre>和\&lt;code>标签来把代码区块包起来。只要某一行未缩进，文本就变成普通的文本行。<br>这是一个标准的代码块，由pre包裹code组合而成。<br>注意：在代码区块中，一般的MD语法不会被转换，像是星号便只是星号，这表示你可以很容易地以 Markdown 语法撰写 Markdown 语法相关的文件。</p></blockquote></blockquote><p>分割线：用三个以上的星号(*)、减号(-)、底线( _ )来建立一个分隔线，行内不能有其他东西;也可以在星号或是减号中间插入空格。</p><hr><hr><hr><hr><hr><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><p>无序列表：使用星号(*)、加号(+)或减号(-)作为列表标记，标记类型为实心原点。</p><ul><li>列表1</li><li>列表2</li><li>列表3  </li></ul><ul><li>列表1</li><li>列表2</li><li>列表3  </li></ul><ul><li>列表1</li><li>列表2</li><li>列表3 </li></ul><ul><br><li>Bird</li><br><li>McHale</li><br><li>Parish</li><br></ul><p>有序列表：使用数字+英文句点+空格作为列表标记。注意：在列表标记上使用的数字并不会影响输出的 HTML 结果，数值可相同也可不连续。</p><ol><li>列表1</li><li>列表2</li><li>列表3  </li></ol><ol><br><li>Bird</li><br><li>McHale</li><br><li>Parish</li><br></ol><h1 id="区段元素"><a href="#区段元素" class="headerlink" title="区段元素"></a>区段元素</h1><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p>MD支持两种形式的链接语法：行内式和参考式两种形式。不管是哪一种，链接文字都是用 [方括号] 来标记。</p><p>行内式格式：在方块括号后面紧接着圆括号并插入网址链接即可，如果你还想要加上链接的 title 文字，只要在网址后面，用双引号把 title 文字包起来即可。即：<a href="链接网址" title="title">链接文本</a>；</p><p>参考式格式：在链接文字的括号后面再接上另一个方括号，而在第二个方括号里面要填入用以辨识链接的标记。即：[链接文本][id值]；[id值]:链接网址 “title”；</p><p><a href="http://www.baidu.com/" target="_blank" rel="noopener">百度</a><br>[百度][baidu];[baidu]:<a href="http://www.baidu.com" target="_blank" rel="noopener">http://www.baidu.com</a> “这是百度的链接”<br>注意：id可以有字母、数字、空白和标点符号，但是并不区分大小写;参考式可以省略指定链接标记，这种情形下，链接标记会视为等同于链接文字，如:[baidu][];[baidu]:<a href="http://www.baidu.com" target="_blank" rel="noopener">http://www.baidu.com</a></p><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p>MD使用一种和链接很相似的语法来标记图片，同样也允许两种样式：行内式和参考式。目前还无法为图片设置宽高！</p><p>行内式：<img src="图片地址" alt="图片替代文本" title="title"></p><p>参考式：![alt 图片替代文本][id]; [id]：图片地址 “title”</p><p><img src="https://www.zybuluo.com/static/img/my_head.jpg" alt="我的头像"></p><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><table><thead><tr><th>name</th><th style="text-align:right">price</th><th style="text-align:center">remark</th></tr></thead><tbody><tr><td>a</td><td style="text-align:right">1.0</td><td style="text-align:center">hehe</td></tr></tbody></table><table><br>    <tr><br>        <td>Foo</td><br>        <td>Foo</td><br>    </tr><br>      <tr><br>        <td>Foo</td><br>        <td>Foo</td><br>    </tr><br></table><h2 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h2><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p><code>console.log(&#39;aa&#39;);</code></p><p><code>There is a literal backtick (`) here.</code></p><h2 id="LaTeX-公式"><a href="#LaTeX-公式" class="headerlink" title="LaTeX 公式"></a>LaTeX 公式</h2><p>$ 表示行内公式： </p><p>质能守恒方程可以用一个很简洁的方程式 $E=mc^2$ 来表达。</p><p>$$ 表示整行公式：</p><p>$$\sum_{i=1}^n a_i=0$$</p><p>$$f(x_1,x_x,\ldots,x_n) = x_1^2 + x_2^2 + \cdots + x_n^2 $$</p><p>$$\sum^{j-1}<em>{k=0}{\widehat{\gamma}</em>{kj} z_k}$$</p><h3 id="7-流程图"><a href="#7-流程图" class="headerlink" title="7. 流程图"></a>7. 流程图</h3><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><pre><code class="flow">st=&gt;start: Start:&gt;https://www.zybuluo.comio=&gt;inputoutput: verificationop=&gt;operation: Your Operationcond=&gt;condition: Yes or No?sub=&gt;subroutine: Your Subroutinee=&gt;endst-&gt;io-&gt;op-&gt;condcond(yes)-&gt;econd(no)-&gt;sub-&gt;io</code></pre><h3 id="8-序列图"><a href="#8-序列图" class="headerlink" title="8. 序列图"></a>8. 序列图</h3><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1"></a>示例 1</h4><pre><code class="seq">Alice-&gt;Bob: Hello Bob, how are you?Note right of Bob: Bob thinksBob--&gt;Alice: I am good thanks!</code></pre><h4 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2"></a>示例 2</h4><pre><code class="seq">Title: Here is a titleA-&gt;B: Normal lineB--&gt;C: Dashed lineC-&gt;&gt;D: Open arrowD--&gt;&gt;A: Dashed open arrow### 9. 甘特图甘特图内在思想简单。基本是一条线条图，横轴表示时间，纵轴表示活动（项目），线条表示在整个期间上计划和实际的活动完成情况。它直观地表明任务计划在什么时候进行，及实际进展与计划要求的对比。```gantt    title 项目开发流程    section 项目确定        需求分析       :a1, 2016-06-22, 3d        可行性报告     :after a1, 5d        概念验证       : 5d    section 项目实施        概要设计      :2016-07-05  , 5d        详细设计      :2016-07-08, 10d        编码          :2016-07-15, 10d        测试          :2016-07-22, 5d    section 发布验收        发布: 2d        验收: 3d</code></pre><h2 id="格式化文本"><a href="#格式化文本" class="headerlink" title="格式化文本"></a>格式化文本</h2><p>保持输入排版格式不变<br>注：对内含标签需要破坏结构才能显示</p><p>代码</p><pre>hello world          hi  hello world </pre>]]></content>
      
      
      <categories>
          
          <category> 软件开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Linux常用命令</title>
      <link href="//posts/d0edc1ed/"/>
      <url>//posts/d0edc1ed/</url>
      
        <content type="html"><![CDATA[<p>清屏clear<br>clear                   清理屏幕显示的内容<br>列出目录 ls<br>ls                列出当前目录的内容<br>ls -l            列出当前目录的详细内容<br>ls -lh          以便于阅读的方式列出详细内容，主要是文件大小的单位变了<br>ls -a           列出目录内包含隐藏项的全部内容<br>ls -lha        -l -h -a等参数可以组合使用<br>ls -l /          列出根目录的详细信息，/代表根目录，换成其他目录，则列出指定目录的内容<br>注：命令行中.或者./代表当前目录；..或者../代表上一级目录；~或者~/代表当前用户主目录。<br>创建目录 mkdir<br>mkdir test         创建一个名为test的目录<br>删除空目录 rmdir<br>如果目录test是空的，那么你可以这样将其删除<br>rmdir test<br>删除文件 rm<br>你可以执行touch tmp.txt命令，在当前目录下创建一个空的文件。<br>rm tmp.txt                 可以删除tmp.txt<br>rm -f tmp.txt             某些配置下，系统会让你确认是否删除，加-f是强行删掉tmp.txt<br>大杀器 rm -rf<br>只要权限足够, rm -rf可以删掉你指定的一切。<br>假定你先mkdir test，然后touch test/tmp.txt，这时rmdir test是不会成功的。<br>但rm -rf test，则会将test目录和目录中的tmp.txt一并删掉。<br>注：Linux命令行是没有回收站的。MySQL从删库到跑路，应该就是执行了rm -rf *。<br>移动文件 mv<br>你可以执行touch tmp.txt命令，在当前目录下创建一个空的文件。<br>mv tmp.txt tmp2.txt                 将文件名从tmp.txt更改为tmp2.txt</p><p>mv也可以用来更改目录名，你可以执行mkdir test在当前目录创建一个名为test的目录。<br>mv test test2                               将目录名从test     改为test2</p><p>上传文件到服务器 rz<br>在命令行执行rz，剩下的根据提示操作。</p><p>如果提示没有找到命令，请安装<br>apt-get install lrzsz</p><p>下载文件到本地 sz<br>在命令行执行echo ‘Hello world!’ &gt; tmp.txt，这时你创建了一个文本文件。<br>sz tmp.txt                  将tmp.txt发送到本地<br>注：在CentOS中使用rz/sz需要安装lrzsz，即执行命令sudo yum install lrzsz，测试用的虚拟机里已经装好了。<br>解压zip包 unzip<br>假定你用rz上传了一个test.zip，那么你可以用如下命令解压<br>unzip test.zip<br>注：unzip是需要通过sudo yum install unzip安装的，测试用的虚拟机中已安装。<br>解压xz包 xz -d<br>node.js的Linux安装包名称形如node-8.1.1.tar.xz，扩展名.tar.xz，解包时需要<br>xz -d node-8.1.1.tar.xz              这时会得到node-8.1.1.tar，然后<br>tar -vxf node-8.1.1.tar              这时才得到解压后的目录node-8.1.1<br>注：Linux里实际上没有扩展名的说法，.tdar.xz这样的后缀只是为了便于理解。<br>tar.gz的打包和解包<br>如前所述, mkdir test，touch test/tmp.txt，可以创建一个目录一个文件，现在把这个目录打包。<br>tar -zvcf test.tar.gz test/                   这样就创建了test.tar.gz压缩包<br>tar -zvxf test.tar.gz                    这样可以解包<br>ping<br>ping 114.114.114.114                                           如果服务器有多个IP，可以指定源IP<br>ping 114.114.114.114 -I 192.168.70.99<br>查看负载 top<br>top            动态显示负载，输入top后按数字1，可以显示或隐藏各个cpu核心的负载<br>Ctrl + C退出top命令<br>查看磁盘空间 df -lh<br>df -lh         显示磁盘空间使用情况<br>查看目录大小 du -sh<br>du -sh test/      查看test目录占用多大空间<br>查看服务器的一个外网IP<br>curl myip.ipip.net              这是用curl命令去访问ipip.net，会返回外网IP<br>注：如果提示找不到curl命令，可以sudo yum install curl。</p><p>查看nginx安装目录<br>ps -ef | grep nginx</p><p>ssh-copy-id -i id_rsa_zpf2048.pub <a href="mailto:root@47.89.242.136" target="_blank" rel="noopener">root@47.89.242.136</a></p><p>$ pm2 list               # 显示所有进程状态</p><p>查看侦听端口<br>netstat -an|grep LISTEN</p><p>查看侦听端口<br>netstat -ntpl</p><p>检查nginx配置文件是否正确<br>/usr/sbin/nginx -c /etc/nginx/nginx.conf -t<br>nginx -c /etc/nginx/nginx.conf -t<br>检查完没有问题后，就可以reload配置了<br>nginx -s reload</p>]]></content>
      
      
      <categories>
          
          <category> 软件开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SqlServer常用维护脚本</title>
      <link href="//posts/9e94bf8/"/>
      <url>//posts/9e94bf8/</url>
      
        <content type="html"><![CDATA[<h1 id="查看数据库文件空间使用率"><a href="#查看数据库文件空间使用率" class="headerlink" title="查看数据库文件空间使用率"></a>查看数据库文件空间使用率</h1><p>SELECT a.name [文件名称]<br>    ,cast(a.[size]<em>1.0/128 as decimal(12,1)) AS [文件设置大小(MB)]<br>    ,CAST( fileproperty(s.name,’SpaceUsed’)/(8</em>16.0) AS DECIMAL(12,1)) AS [文件所占空间(MB)]<br>    ,CAST( (fileproperty(s.name,’SpaceUsed’)/(8<em>16.0))/(s.size/(8</em>16.0))<em>100.0  AS DECIMAL(12,1)) AS [所占空间率%]<br>    ,CASE WHEN A.growth =0 THEN ‘文件大小固定，不会增长’ ELSE ‘文件将自动增长’ end [增长模式]<br>    ,CASE WHEN A.growth &gt; 0 AND is_percent_growth = 0 THEN ‘增量为固定大小’<br>        WHEN A.growth &gt; 0 AND is_percent_growth = 1 THEN ‘增量将用整数百分比表示’<br>        ELSE ‘文件大小固定，不会增长’ END AS [增量模式]<br>    ,CASE WHEN A.growth &gt; 0 AND is_percent_growth = 0 THEN cast(cast(a.growth</em>1.0/128as decimal(12,0)) AS VARCHAR)+’MB’<br>        WHEN A.growth &gt; 0 AND is_percent_growth = 1 THEN cast(cast(a.growth AS decimal(12,0)) AS VARCHAR)+’%’<br>        ELSE ‘文件大小固定，不会增长’ end AS [增长值(%或MB)]<br>    ,a.physical_name AS [文件所在目录]<br>    ,a.type_desc AS [文件类型]<br>FROM sys.database_files  a<br>INNER JOIN sys.sysfiles AS s ON a.[file_id]=s.fileid<br>LEFT JOIN sys.dm_db_file_space_usage b ON a.[file_id]=b.[file_id]</p><h1 id="收缩日志"><a href="#收缩日志" class="headerlink" title="收缩日志"></a>收缩日志</h1><p>DBCC SHRINKDATABASE(yorkbbs)<br>请谨慎操作，执行时间会根据数据库大小有所不同。</p><p>如果出现如下错误，那请备份一下数据库，使用事务日志备份方式备份<br>消息 0，级别 11，状态 0，第 0 行<br>当前命令发生了严重错误。应放弃任何可能产生的结果。</p><p>1.清空日志<br>　 DUMP TRANSACTION yorkbbs WITH NO_LOG </p><p>2.截断事务日志：<br>　 BACKUP LOG yorkbbs WITH NO_LOG</p><h1 id="查询日志空间使用率"><a href="#查询日志空间使用率" class="headerlink" title="查询日志空间使用率"></a>查询日志空间使用率</h1><p>DBCC SQLPERF(LOGSPACE)</p>]]></content>
      
      
      <categories>
          
          <category> 软件开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SqlServer </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>对软件开发的一些想法</title>
      <link href="//posts/a311a15/"/>
      <url>//posts/a311a15/</url>
      
        <content type="html"><![CDATA[<p>我觉得做开发，做产品，开发系统就跟艺术家做一个艺术品是一样的，需要精雕细琢，要有一种追求完美的精神，只有不断的追求完美，你的产品才会不断的提高。<br>不能只想着满足现在，要经常检查自己写过的代码，有没有改进优化的可能，如何提高？这样才会进步。</p>]]></content>
      
      
      <categories>
          
          <category> 人生感悟 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件开发 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>M1卡区块控制位详解</title>
      <link href="//posts/5c9a502c/"/>
      <url>//posts/5c9a502c/</url>
      
        <content type="html"><![CDATA[<p>M1卡区块控制位详解<br><a id="more"></a><br>每个扇区的密码和存取控制都是独立的，可以根据实际需要设定各自的密码及存取 控制。存取控制为4个字节，共32位，扇区中的每个块（包括数据块和控制块）的存取条件是由密码和存取控制共同决定的，在存取控制中每个块都有相应的三个控制位,定义如下：<br>块0：   C10   C20   C30<br>块1：   C11   C21   C31<br>块2：   C12   C22   C32<br>块3：   C13   C23   C33<br>三个控制位以正和反两种形式存在于存取控制字节中，决定了该块的访问权限（如     进行减值操作必须验证KEY A，进行加值操作必须验证KEY B，等等）。三个控制   位在存取控制字节中的位置，以块0为例：<br><img src="/img/5c9a502c/1.png"></p><font color="red">注意高字节和低字节顺序不同。</font><p>(一)，以常用设置”08 77 8F 69”控制条件为例，先搞清楚它――具有的访问权限。</p><p>1、对”08 77 8F 69”值进行计算，该值定位于各区块3的6，7，8，9四个字节内，字节6=08，字节7=77， 字节8=8F，   字节9=69(默认值，不予计算)。</p><p>2、例如：字节6=08，对应其二进制值=00001000， 则对6，7，8这三个字节进行二进制转换结果见下表：<br>字节6 = 0 0 0 0 1 0 0 0 字节7 = 0 1 1 1 0 1 1 1 字节8 = 1 0 0 0 1 1 1 1<br>3、参照表2及表4算法,字节6的全部二进制值取反,字节7的低四位二进制值取反,字节8不变,<br><img src="/img/5c9a502c/2.png"></p><p>得到：<br>字节号 对应二进制值 位置 高4位 位置 低4位<br>字节6字节7字节8 0 0 0 0 1 0 0 00 1 1 1 0 1 1 11 0 0 0 1 1 1 1 C2YC1YC3Y 1 1 1 10 1 1 11 0 0 0 C1YC3YC2Y 0 1 1 11 0 0 01 1 1 1<br>所属块位   块3块2块1块0  块3块2块1块0<br>4、对以上6，7，8字节的存取/控制二进制已取反值，依照表2，表4块位转换为各块控制值，如下表：<br>块3位 字节7，字节6，字节8 = C13，C23，C33 = C1Y，C2Y，C3Y = 0 1 1<br>块2位块1位块0位 字节7，字节6，字节8 = C12，C22，C32 = C1Y，C2Y，C3Y = 1 1 0字节7，字节6，字节8 = C11，C21，C31 = C1Y，C2Y，C3Y = 1 1 0字节7，字节6，字节8 = C10，C20，C30 = C1Y，C2Y，C3Y = 1 1 0<br>注意：<br>1、高4位的各块值=低4位的各块值时，其值可用。高4位值≠低4位值时，其值不可用!<br>2、高位和低位的顺序是不一样的。高位从上向下是C2,C1,C3。低位是C1,C3,C2</p><p><img src="/img/5c9a502c/3.png"></p><p> 7 6 5 4 3 2 1 0<br>6 c23_b c22_b c21_b c20_b c13_b c12_b c11_b c10_b<br>7 c13 c12 c11 c10 c33_b c32_b c31_b c30_b<br>8 c33 c32 c31 c30 c23 c22 c21 c20<br>9        </p><p>5、查对访问权限(数据存取控制依照表3，块3存取控制依照表5)，该例”08 77 8F 69”的访问权限为：</p><p>◆ 块3 = 011：权限为：KeyA，KeyB均不可读，验证KeyB正确后可改写KeyA和KeyB，验证KeyA或KeyB正确后可读”控制位”。在此可见密钥KeyB的重要性，KeyB不正确是无法看到块3控制值，更无法修改密钥。</p><p>◆ 块2 = 块1 = 块0 = 110：权限为：验证KeyA或KeyB后可读该块数据，减值以及初始化值，只有验证KeyB 正确后才可改写该块数据，在此可以看到密钥KeyB对改写数据块也起着关键性作用。</p><p>(二)、”08 77 8F 69” 控制条件设置步骤：</p><p>由(一)可知：KeyB设置后为不可读，并且改写数据和改写控制位都需要正确验证它，故KeyB设置后程序</p><p>操作员必须妥善保管KeyB值，否则以后改写数据和控制位时，不正确的KeyB值将无法实现卡的任何操作!!!</p><p>1、修改块3控制位的值：最初的各区块3内的KeyA，KeyB都是厂商12个”F”默认值(KeyA在任何条件下均为不可读，大部分读写机程序表现KeyA为未知的12个”0” )，在修改控制值时，先不要修改默认密码KeyA和KeyB，在控制位修改成功后，再去更改新密码值。即先对块3的控制位进行修改(默认值FF 07 80 69改为新值08 77 8F 69)并执行写操作。控制位写成功后，KeyB亦为12个”0”不可读了，但仍是隐藏的12个”f”默认值。</p><p>2、修改块3的KeyA和KeyB值：控制位08 77 8F 69值写成功后，验证KeyB正确后方可改写KeyA和KeyB新密码。在密码操作模式键入要改写区块之先前密码B(先前密码为默认值时，则不需改动和加载)，加载后反回数据操作模式，再进行读值，KeyA和KeyB值的改写。</p><p>3、修改块0～块2中数据：由新的控制条件08778F69可知，要修改数据，必须先验证KeyB，故先设置密码操作为KeyB认证方式，加载后再返回数据操作模式，对要修改的数据块进行值的改写操作。</p><p>4、上例中分析了”08 77 8F 69”的访问条件及其改写步骤，对用户的其它控制条件亦可参照应用。<br>智能卡</p><p>块012权限说明：<br><img src="/img/5c9a502c/4.png"><br><img src="/img/5c9a502c/5.png"></p><p>块3权限说明：<br><img src="/img/5c9a502c/6.png"><br>复旦微电子文档中说明如下：<br><img src="/img/5c9a502c/7.png"></p><p>比较常见的控制位<br>FF 07 80 69<br>默认值<br>字节6 FF= 1 1 1 1 1 1 1 1 字节7 07= 0 0 0 0 0 1 1 1 字节8 80= 1 0 0 0 0 0 0 0</p><p>字节号 对应二进制值 位置 高4位 位置 低4位<br>字节6字节7字节8 1 1 1 1 1 1 1 10 0 0 0 0 1 1 11 0 0 0 0 0 0 0 C2YC1YC3Y 0 0 0 00 0 0 01 0 0 0 C1YC3YC2Y 0 0 0 01 0 0 00 0 0 0<br>所属块位   块3块2块1块0  块3块2块1块0</p><p>块3位 字节7，字节6，字节8 = C13，C23，C33 = C1Y，C2Y，C3Y = 0 0 1<br>块2位块1位块0位 字节7，字节6，字节8 = C12，C22，C32 = C1Y，C2Y，C3Y = 0 0 0字节7，字节6，字节8 = C11，C21，C31 = C1Y，C2Y，C3Y = 0 0 0字节7，字节6，字节8 = C10，C20，C30 = C1Y，C2Y，C3Y = 0 0 0<br>权限解释：数据块012的权限为000，表示keyA和keyB都可读可写。权限最高。<br><img src="/img/5c9a502c/8.png"></p><p>块3为001，密码A为任何时候不可读出，可以通过AB写。<br>密码B可以通过AB读写。<br>控制字节可以通过AB读写。<br><img src="/img/5c9a502c/9.png"></p><hr><p>08 77 8F 69【适合实际使用，权限控制相对较好】<br>字节6 = 0 0 0 0 1 0 0 0 字节7 = 0 1 1 1 0 1 1 1 字节8 = 1 0 0 0 1 1 1 1</p><p>字节号 对应二进制值 位置 高4位 位置 低4位<br>字节6字节7字节8 0 0 0 0 1 0 0 00 1 1 1 0 1 1 11 0 0 0 1 1 1 1 C2YC1YC3Y 1 1 1 10 1 1 11 0 0 0 C1YC3YC2Y 0 1 1 11 0 0 01 1 1 1<br>所属块位   块3块2块1块0  块3块2块1块0</p><p>块3位 字节7，字节6，字节8 = C13，C23，C33 = C1Y，C2Y，C3Y = 0 1 1<br>块2位块1位块0位 字节7，字节6，字节8 = C12，C22，C32 = C1Y，C2Y，C3Y = 1 1 0字节7，字节6，字节8 = C11，C21，C31 = C1Y，C2Y，C3Y = 1 1 0字节7，字节6，字节8 = C10，C20，C30 = C1Y，C2Y，C3Y = 1 1 0<br>权限解释：数据块012的权限为110，密码AB都可读，只有密码B可写。密码B可增减。比如，可在实际业务中密码A用于消费，密码B用于充值。<br><img src="/img/5c9a502c/10.png"><br>块3<br>011，密码A和密码B任何时间不允许读，只能用密码B写。控制字节AB都可读，只有B可写。<br><img src="/img/5c9a502c/11.png"></p><p>07 8F 0F 69【冰冻，永远只可读不可写】</p><p>00 F0 FF 69【自杀，永远不可读不可写】自杀模式还有很多，把控制字写的不认识也无法使用，在实际中新手经常干的事，所以一定要控制好。<br><img src="/img/5c9a502c/12.png"></p><p>对数据块的操作<br>读 (Read)：读一个块；<br>写 (Write）：写一个块；<br>加（Increment）：对数值块进行加值；<br>减（Decrement）：对数值块进行减值；<br>存储（Restore）：将块中的内容存到数据寄存器中；<br>传输（Transfer）：将数据寄存器中的内容写入块中；<br>中止（Halt）：将卡置于暂停工作状态；</p><p>好了，介绍就到这里，大家有疑问，欢迎联系我。</p>]]></content>
      
      
      <categories>
          
          <category> 软件开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mf1 加密 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>配置git的ssh密钥</title>
      <link href="//posts/a6a3fa60/"/>
      <url>//posts/a6a3fa60/</url>
      
        <content type="html"><![CDATA[<p>配置git的ssh密钥<br><a id="more"></a></p><h2 id="生成密钥"><a href="#生成密钥" class="headerlink" title="生成密钥"></a>生成密钥</h2><p>zhupengfei@bonn-pc MINGW64 /d/Users/zhupengfei/.ssh<br>$ ssh-keygen -t rsa -C “<a href="mailto:zhupengfeivip@163.com" target="_blank" rel="noopener">zhupengfeivip@163.com</a>“<br>之后一直点回车即可，大概是三次回车，不需要任何输入。</p><p>Generating public/private rsa key pair.<br>Enter file in which to save the key (/c/Users/zhupengfei/.ssh/id_rsa):<br><br>Enter passphrase (empty for no passphrase):<br><br>Enter same passphrase again:<br><br>Your identification has been saved in /c/Users/zhupengfei/.ssh/id_rsa.<br><br>Your public key has been saved in /c/Users/zhupengfei/.ssh/id_rsa.pub.<br><br>The key fingerprint is:<br><br>SHA256:ZOomdySnm2qE/pOIl6x8D7C/u/WBqlE4FTP+J271L9Q <a href="mailto:zhupengfeivip@163.com" target="_blank" rel="noopener">zhupengfeivip@163.com</a><br>The key’s randomart image is:<br>+—[RSA 2048]—-+<br>|   +             |<br>|  . +            |<br>|   o    o        |<br>|  o .  +         |<br>| + o oooS .      |<br>|  <em> o.==.. E     |<br>| </em> =.*=.o.       |<br>|o O.O+.+…      |<br>|.=oOB+o.  ..     |<br>+—-[SHA256]—–+</p><h2 id="上传密钥"><a href="#上传密钥" class="headerlink" title="上传密钥"></a>上传密钥</h2><p>将密钥保存在github中，不再说明</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>zhupengfei@bonn-pc MINGW64 /d/Users/zhupengfei/.ssh<br>$ ssh -T <a href="mailto:zhupengfeivip@163.com" target="_blank" rel="noopener">zhupengfeivip@163.com</a><br>ssh: connect to host 163.com port 22: Connection timed out</p><p>zhupengfei@bonn-pc MINGW64 /d/Users/zhupengfei/.ssh<br>$ ssh -T <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a><br>Hi zhupengfeivip! You’ve successfully authenticated, but GitHub does not provide<br>shell access.</p>]]></content>
      
      
      <categories>
          
          <category> 软件开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用hexo开通博客</title>
      <link href="//posts/41644/"/>
      <url>//posts/41644/</url>
      
        <content type="html"><![CDATA[<p>Hexo使用帮助<br><a id="more"></a><br>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h3 id="创建文章"><a href="#创建文章" class="headerlink" title="创建文章"></a>创建文章</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="运行调试"><a href="#运行调试" class="headerlink" title="运行调试"></a>运行调试</h3><pre><code class="bash">$ hexo server</code></pre><p>如果运行后界面没有反映，一直是白的，可能是端口被占用<br>可试着运行</p><pre><code class="bash">$ hexo server -p 4001</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><p>一些常用命令：</p><p>hexo new “postName” #新建文章</p><p>hexo new page “pageName” #新建页面</p><p>hexo generate #生成静态页面至public目录</p><p>hexo server #开启预览访问端口（默认端口4000，’ctrl + c’关闭server）</p><p>hexo deploy #将.deploy目录部署到GitHub</p><p>hexo help # 查看帮助</p><p>hexo version #查看Hexo的版本</p><h2 id="更换主题的方法"><a href="#更换主题的方法" class="headerlink" title="更换主题的方法"></a>更换主题的方法</h2><p>下载新的主题到themes目录<br>如要换3-hexo<br>git clone <a href="https://github.com/yelog/hexo-theme-3-hexo.git" target="_blank" rel="noopener">https://github.com/yelog/hexo-theme-3-hexo.git</a> themes/3-hexo</p><p>修改hexo根目录的<code>_config.yml</code>，如下</p><pre><code class="xml">theme: 3-hexo</code></pre>]]></content>
      
      
      <categories>
          
          <category> 软件开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
