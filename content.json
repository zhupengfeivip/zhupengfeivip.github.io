{"meta":{"title":"朱鹏飞的个人博客","subtitle":"c# nodejs","description":"朱鹏飞的个人博客，专业.net开发10余年，现在开始用nodejs","author":"朱鹏飞","url":"https://zhupengfeivip.github.io"},"pages":[{"title":"关于","date":"2018-04-10T10:29:01.000Z","updated":"2018-04-13T05:09:51.654Z","comments":true,"path":"about/index.html","permalink":"https://zhupengfeivip.github.io/about/index.html","excerpt":"","text":"朱鹏飞.net 10年"},{"title":"关于我","date":"2018-04-10T10:28:34.000Z","updated":"2018-04-13T05:19:49.124Z","comments":true,"path":"resume/index.html","permalink":"https://zhupengfeivip.github.io/resume/index.html","excerpt":"","text":"个人介绍姓 名 ：朱鹏飞性 别 ：男民 族 ：汉族籍 贯 ：河南毕业院校 ：郑州大学软件学院学 历 ：大专专 业 ：数据库应用与信息管理专业微信号 ：zhupengfeivip 工作能力及特长 8年工作经验，熟练掌握C#高级开发语言，并能够熟练独立运用 熟悉Visual Studio.net框架，具有6年.net架构设计的经验，能够熟练快速进行B/S、C/S系统开发。 熟练使用JQuery，XML，JSON，ECharts等技术 熟悉软件开发基本思路及流程，熟练掌握ORALCE、SQL-Server、Access等数据库语言的操作与运用 了解Delphi、JAVA等主流开发语言。了解UML等通用建模语言。 熟练使用WINDOWS操作系统，了解并会简单使用Red Hat Linux(Fedora Core 3)操作系统。 熟练计算机的基本操作和应用。 个人素质能够吃苦耐劳，勇于接受挑战，学习能力强，表现出很强的沟通技巧，工作主观能力强，适应力好，可以很快的学习新技能，可以同时有效的承担不同的职责，是个容易相处和乐于助人的朋友。"},{"title":"分类","date":"2018-04-10T10:28:34.000Z","updated":"2018-04-10T11:45:46.140Z","comments":false,"path":"categories/index.html","permalink":"https://zhupengfeivip.github.io/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2018-04-10T10:27:51.000Z","updated":"2018-04-13T05:10:11.818Z","comments":false,"path":"tags/index.html","permalink":"https://zhupengfeivip.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"M1卡区块控制位详解","slug":"M1卡区块控制位详解","date":"2018-04-13T00:22:45.000Z","updated":"2018-04-16T04:39:16.332Z","comments":true,"path":"/posts/5c9a502c/","link":"","permalink":"https://zhupengfeivip.github.io/posts/5c9a502c/","excerpt":"M1卡区块控制位详解","text":"M1卡区块控制位详解每个扇区的密码和存取控制都是独立的，可以根据实际需要设定各自的密码及存取 控制。存取控制为4个字节，共32位，扇区中的每个块（包括数据块和控制块）的存取条件是由密码和存取控制共同决定的，在存取控制中每个块都有相应的三个控制位,定义如下：块0： C10 C20 C30块1： C11 C21 C31块2： C12 C22 C32块3： C13 C23 C33三个控制位以正和反两种形式存在于存取控制字节中，决定了该块的访问权限（如 进行减值操作必须验证KEY A，进行加值操作必须验证KEY B，等等）。三个控制 位在存取控制字节中的位置，以块0为例： 注意高字节和低字节顺序不同。 (一)，以常用设置”08 77 8F 69”控制条件为例，先搞清楚它――具有的访问权限。 1、对”08 77 8F 69”值进行计算，该值定位于各区块3的6，7，8，9四个字节内，字节6=08，字节7=77， 字节8=8F， 字节9=69(默认值，不予计算)。 2、例如：字节6=08，对应其二进制值=00001000， 则对6，7，8这三个字节进行二进制转换结果见下表：字节6 = 0 0 0 0 1 0 0 0 字节7 = 0 1 1 1 0 1 1 1 字节8 = 1 0 0 0 1 1 1 13、参照表2及表4算法,字节6的全部二进制值取反,字节7的低四位二进制值取反,字节8不变, 得到：字节号 对应二进制值 位置 高4位 位置 低4位字节6字节7字节8 0 0 0 0 1 0 0 00 1 1 1 0 1 1 11 0 0 0 1 1 1 1 C2YC1YC3Y 1 1 1 10 1 1 11 0 0 0 C1YC3YC2Y 0 1 1 11 0 0 01 1 1 1所属块位 块3块2块1块0 块3块2块1块04、对以上6，7，8字节的存取/控制二进制已取反值，依照表2，表4块位转换为各块控制值，如下表：块3位 字节7，字节6，字节8 = C13，C23，C33 = C1Y，C2Y，C3Y = 0 1 1块2位块1位块0位 字节7，字节6，字节8 = C12，C22，C32 = C1Y，C2Y，C3Y = 1 1 0字节7，字节6，字节8 = C11，C21，C31 = C1Y，C2Y，C3Y = 1 1 0字节7，字节6，字节8 = C10，C20，C30 = C1Y，C2Y，C3Y = 1 1 0注意：1、高4位的各块值=低4位的各块值时，其值可用。高4位值≠低4位值时，其值不可用!2、高位和低位的顺序是不一样的。高位从上向下是C2,C1,C3。低位是C1,C3,C2 7 6 5 4 3 2 1 06 c23_b c22_b c21_b c20_b c13_b c12_b c11_b c10_b7 c13 c12 c11 c10 c33_b c32_b c31_b c30_b8 c33 c32 c31 c30 c23 c22 c21 c209 5、查对访问权限(数据存取控制依照表3，块3存取控制依照表5)，该例”08 77 8F 69”的访问权限为： ◆ 块3 = 011：权限为：KeyA，KeyB均不可读，验证KeyB正确后可改写KeyA和KeyB，验证KeyA或KeyB正确后可读”控制位”。在此可见密钥KeyB的重要性，KeyB不正确是无法看到块3控制值，更无法修改密钥。 ◆ 块2 = 块1 = 块0 = 110：权限为：验证KeyA或KeyB后可读该块数据，减值以及初始化值，只有验证KeyB 正确后才可改写该块数据，在此可以看到密钥KeyB对改写数据块也起着关键性作用。 (二)、”08 77 8F 69” 控制条件设置步骤： 由(一)可知：KeyB设置后为不可读，并且改写数据和改写控制位都需要正确验证它，故KeyB设置后程序 操作员必须妥善保管KeyB值，否则以后改写数据和控制位时，不正确的KeyB值将无法实现卡的任何操作!!! 1、修改块3控制位的值：最初的各区块3内的KeyA，KeyB都是厂商12个”F”默认值(KeyA在任何条件下均为不可读，大部分读写机程序表现KeyA为未知的12个”0” )，在修改控制值时，先不要修改默认密码KeyA和KeyB，在控制位修改成功后，再去更改新密码值。即先对块3的控制位进行修改(默认值FF 07 80 69改为新值08 77 8F 69)并执行写操作。控制位写成功后，KeyB亦为12个”0”不可读了，但仍是隐藏的12个”f”默认值。 2、修改块3的KeyA和KeyB值：控制位08 77 8F 69值写成功后，验证KeyB正确后方可改写KeyA和KeyB新密码。在密码操作模式键入要改写区块之先前密码B(先前密码为默认值时，则不需改动和加载)，加载后反回数据操作模式，再进行读值，KeyA和KeyB值的改写。 3、修改块0～块2中数据：由新的控制条件08778F69可知，要修改数据，必须先验证KeyB，故先设置密码操作为KeyB认证方式，加载后再返回数据操作模式，对要修改的数据块进行值的改写操作。 4、上例中分析了”08 77 8F 69”的访问条件及其改写步骤，对用户的其它控制条件亦可参照应用。智能卡 块012权限说明： 块3权限说明：复旦微电子文档中说明如下： 比较常见的控制位FF 07 80 69默认值字节6 FF= 1 1 1 1 1 1 1 1 字节7 07= 0 0 0 0 0 1 1 1 字节8 80= 1 0 0 0 0 0 0 0 字节号 对应二进制值 位置 高4位 位置 低4位字节6字节7字节8 1 1 1 1 1 1 1 10 0 0 0 0 1 1 11 0 0 0 0 0 0 0 C2YC1YC3Y 0 0 0 00 0 0 01 0 0 0 C1YC3YC2Y 0 0 0 01 0 0 00 0 0 0所属块位 块3块2块1块0 块3块2块1块0 块3位 字节7，字节6，字节8 = C13，C23，C33 = C1Y，C2Y，C3Y = 0 0 1块2位块1位块0位 字节7，字节6，字节8 = C12，C22，C32 = C1Y，C2Y，C3Y = 0 0 0字节7，字节6，字节8 = C11，C21，C31 = C1Y，C2Y，C3Y = 0 0 0字节7，字节6，字节8 = C10，C20，C30 = C1Y，C2Y，C3Y = 0 0 0权限解释：数据块012的权限为000，表示keyA和keyB都可读可写。权限最高。 块3为001，密码A为任何时候不可读出，可以通过AB写。密码B可以通过AB读写。控制字节可以通过AB读写。 08 77 8F 69【适合实际使用，权限控制相对较好】字节6 = 0 0 0 0 1 0 0 0 字节7 = 0 1 1 1 0 1 1 1 字节8 = 1 0 0 0 1 1 1 1 字节号 对应二进制值 位置 高4位 位置 低4位字节6字节7字节8 0 0 0 0 1 0 0 00 1 1 1 0 1 1 11 0 0 0 1 1 1 1 C2YC1YC3Y 1 1 1 10 1 1 11 0 0 0 C1YC3YC2Y 0 1 1 11 0 0 01 1 1 1所属块位 块3块2块1块0 块3块2块1块0 块3位 字节7，字节6，字节8 = C13，C23，C33 = C1Y，C2Y，C3Y = 0 1 1块2位块1位块0位 字节7，字节6，字节8 = C12，C22，C32 = C1Y，C2Y，C3Y = 1 1 0字节7，字节6，字节8 = C11，C21，C31 = C1Y，C2Y，C3Y = 1 1 0字节7，字节6，字节8 = C10，C20，C30 = C1Y，C2Y，C3Y = 1 1 0权限解释：数据块012的权限为110，密码AB都可读，只有密码B可写。密码B可增减。比如，可在实际业务中密码A用于消费，密码B用于充值。块3011，密码A和密码B任何时间不允许读，只能用密码B写。控制字节AB都可读，只有B可写。 07 8F 0F 69【冰冻，永远只可读不可写】 00 F0 FF 69【自杀，永远不可读不可写】自杀模式还有很多，把控制字写的不认识也无法使用，在实际中新手经常干的事，所以一定要控制好。 对数据块的操作读 (Read)：读一个块；写 (Write）：写一个块；加（Increment）：对数值块进行加值；减（Decrement）：对数值块进行减值；存储（Restore）：将块中的内容存到数据寄存器中；传输（Transfer）：将数据寄存器中的内容写入块中；中止（Halt）：将卡置于暂停工作状态； 好了，介绍就到这里，大家有疑问，欢迎联系我。","categories":[{"name":"开发","slug":"开发","permalink":"https://zhupengfeivip.github.io/categories/开发/"}],"tags":[{"name":"mf1 加密","slug":"mf1-加密","permalink":"https://zhupengfeivip.github.io/tags/mf1-加密/"}]},{"title":"配置git的ssh密钥","slug":"配置git的ssh密钥","date":"2018-04-10T11:31:41.000Z","updated":"2018-04-16T05:07:16.777Z","comments":true,"path":"/posts/a6a3fa60/","link":"","permalink":"https://zhupengfeivip.github.io/posts/a6a3fa60/","excerpt":"配置git的ssh密钥","text":"配置git的ssh密钥 生成密钥zhupengfei@bonn-pc MINGW64 /d/Users/zhupengfei/.ssh$ ssh-keygen -t rsa -C “zhupengfeivip@163.com“之后一直点回车即可，大概是三次回车，不需要任何输入。 Generating public/private rsa key pair.Enter file in which to save the key (/c/Users/zhupengfei/.ssh/id_rsa):Enter passphrase (empty for no passphrase):Enter same passphrase again:Your identification has been saved in /c/Users/zhupengfei/.ssh/id_rsa.Your public key has been saved in /c/Users/zhupengfei/.ssh/id_rsa.pub.The key fingerprint is:SHA256:ZOomdySnm2qE/pOIl6x8D7C/u/WBqlE4FTP+J271L9Q zhupengfeivip@163.comThe key’s randomart image is:+—[RSA 2048]—-+| + || . + || o o || o . + || + o oooS . || o.==.. E || =.*=.o. ||o O.O+.+… ||.=oOB+o. .. |+—-[SHA256]—–+ 上传密钥将密钥保存在github中，不再说明 测试zhupengfei@bonn-pc MINGW64 /d/Users/zhupengfei/.ssh$ ssh -T zhupengfeivip@163.comssh: connect to host 163.com port 22: Connection timed out zhupengfei@bonn-pc MINGW64 /d/Users/zhupengfei/.ssh$ ssh -T git@github.comHi zhupengfeivip! You’ve successfully authenticated, but GitHub does not provideshell access.","categories":[{"name":"开发","slug":"开发","permalink":"https://zhupengfeivip.github.io/categories/开发/"}],"tags":[{"name":"git","slug":"git","permalink":"https://zhupengfeivip.github.io/tags/git/"}]},{"title":"使用hexo开通博客","slug":"使用hexo开通博客","date":"2018-04-10T05:15:08.000Z","updated":"2018-04-16T04:42:06.364Z","comments":true,"path":"/posts/41644/","link":"","permalink":"https://zhupengfeivip.github.io/posts/41644/","excerpt":"Hexo使用帮助","text":"Hexo使用帮助Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"开发","slug":"开发","permalink":"https://zhupengfeivip.github.io/categories/开发/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://zhupengfeivip.github.io/tags/hexo/"}]}]}